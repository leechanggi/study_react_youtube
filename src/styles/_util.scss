@use 'sass:math';
@use './common/variable' as *;

// Unit Calculate
$rem-base: $base_font-size !default;

@function strip-unit($num) {
	@return math.div($num, ($num * 0 + 1));
}

@function convert-to-rem($value, $base-value: $rem-base) {
	$value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;
	@if ($value == 0rem) {
		$value: 0;
	}
	@return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
	$max: length($values);

	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value);
	}

	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}

@function em-calc($values) {
	$remValues: rem-calc($values);

	$max: length($remValues);

	@if $max == 1 {
		@return strip-unit(nth($remValues, 1)) * 1em;
	}

	$emValues: ();
	@for $i from 1 through $max {
		$emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
	}
	@return $emValues;
}

// Theme Picker
@function get-color($key, $type: 'light') {
	@each $name, $color in map-get($theme, $type) {
		@if ($key == $name) {
			@return $color;
		}
	}
}

@mixin theme-picker($property, $color: $property) {
	#{$property}: get-color($color);
	@at-root body[data-theme='dark'] & {
		#{$property}: get-color($color, dark);
	}
}
